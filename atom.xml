<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[YounG for You]]></title>
  <link href="http://i3zhe.github.com/atom.xml" rel="self"/>
  <link href="http://i3zhe.github.com/"/>
  <updated>2012-12-27T15:00:42+08:00</updated>
  <id>http://i3zhe.github.com/</id>
  <author>
    <name><![CDATA[Jerry Huo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如果黑 请用力]]></title>
    <link href="http://i3zhe.github.com/blog/2012/12/26/ru-guo-hei-qing-yong-li/"/>
    <updated>2012-12-26T13:58:00+08:00</updated>
    <id>http://i3zhe.github.com/blog/2012/12/26/ru-guo-hei-qing-yong-li</id>
    <content type="html"><![CDATA[<p><button type="button" name="" value="" class="css3button">真相在这</button>
昨个和今天粗读了一下备受推崇的<a href="http://book.douban.com/subject/1440223/">《Don&#8217;t make me think
》</a>，虽然咱主力工作是后端攻城狮，但个人对前端技术还是非常感兴趣。</p>

<p>怀着无比崇敬的心情颤抖着翻开这份Web设计宝典，幻想着自己翻完此书即可向前端设计领域迈进一步。
<span class="error_section">事实证明我<span class="error">错</span>了</span></p>

<p>读完本宝典最大的心得是：读书是一件愉快的事，如果你愿意深入字里行间，而不是匆匆扫描，你会发觉书籍通常会详细的还原人类认知和思考世界的大部分过程。换句话说：就是很多人们认为理所当然的事情会不假思索的去做，但这种不假思索其实也积累了人们思考和认知的多个步骤。不假思索的同时会意味这你忽略了其中的一些思考过程，通常也会忽略一些潜在的问题。</p>

<p>比如本书在第2章诠释的“我们实际上是如何使用Web的”指出：</p>

<h4>第一个事实：我们不是阅读，而是扫描</h4>

<p>  现今的海量信息催使我们不得不加快节奏，阅读变成扫描，阅读之后甚至连理解消化的步骤都被自动省去。这一行为有些是主动，
比如对所读内容根本提不起兴趣，左眼进右眼出。 还有些是被动的，比如突然冒出一些打折或八卦消息，你就会马上转移注意力。
<span class="error_section">
Twitter这种Web应用的出现更是引爆信息的广泛传播，助长了扫描的恶习。前一秒你还在为某高架桥坍塌事故遇害者点蜡烛，
眼泪还未挤出，没承想下一刻就爆出某公子艳照门。于是你赶紧撸鼻涕为力量，使劲浑身解数搜索，各大论坛，知道，搜搜，
问问都出现你跪求高清无码种子的销魂背影。
待到为依撸得人憔悴之时，蓦然回首发现扔在卫生纸下面的蜡烛，不免黯然神伤，心道：还是把它留到世界末日那天再为我粉身碎骨吧。
</span>
<span class="error_section">
无论是twitter还是中国的微博，火爆起来的原因似乎都是因为人类偷窥的基因作祟。尤其是微博上，
有人现，有人捧场，有人吐槽。有人无节操现，有人无节操捧，吐槽者更无须节操。慢慢的，吐槽似乎变成某些人的爱好，
逞口舌之快诋毁众生，众生却依然乐在其中。最近微博上火爆的<a href="http://weibo.com/nimui">@留几手</a> 大哥就是吐槽神人，为何神？
因为大哥的粉丝们趋之若鹜以被他骂为荣，趋之若鹜。哪天被大哥的唾沫临幸了，恨不得奔走相告，转发给全世界。此为畸形文化。
无责任，无鸭梨，陋习肆意蔓延也就不足为怪。（请诸位勿要和政治联系，仅谈微博现象 <br>
这里还想跟各位做个绿色调查，程序猿是众所周知吐槽最严重的群体，因为这些人大多自负。请问其他行业这种现象明显么？
</span>
<span class="error_section">
我从去年开始也沉迷于Twitter，每天工作闲暇就盯着Timeline刷新，乐在其中。自从看到以和菜头为代表的一批人宣布退出微博，退出Twitter。自己也开始思索碎片时间的利用，到底为什么人们对Twitter，微博这类产品这么着魔？？？<br/>
</span>
<span class="error_section">
<em>以下仅以中国用户举例分析：</em><br>
前面提到的国民热衷偷窥应该是非常重要的诱导因素，可这还远远不够把用户牢牢拴在这2样产品上，达到每天不刷就心痒痒的程度。
不妨从另一个角度考虑，用户厌倦什么类型的应用？<br>
  * 长久不更新<br>
  * 更新无诚意<br>
  * 诚意无创意<br>
  * 创意不八卦 <br>
我这里斗胆揣测一下：大众娱乐的本质就是<strong>八卦</strong> <br>
再反观Twitter和微博：<br>
<code>时时在更新，八卦乱轰炸！</code><br>
尽管用户的兴趣点各有不同，但是用户自己会开启自动查找模式，完美匹配自己的兴趣点，即所谓的物以类聚，人以群分。轮番轰炸完全刺激到用户的G点，一波高潮刚消散，又一波高潮顶上来。同时用户零成本或低成本的接受或散播无营养信息，因为无须负责，病毒式传播在所难免。这种巧妙利用人性特点的产品实在是叫人赞不绝口。<br>
说到这又想起了现在电商的促销手段。高级点的科学运用大数据分析，合理为用户推送优惠信息，并以发送垃圾消息为耻。 低级点的就是狂轰滥炸，甭管你需不需要，甭管我的促销是否真优惠，老子就是刺激你的G点，提醒你我这时不时的搞优惠活动。等用户真有购买需要的时候，大多数确实落入这个圈套，会将这种电商首先纳入考虑范围。于是人家也间接成功了，美其名曰：“暴力美学”。<br>
扯得有点远，八卦呈泛滥之势，节操无限降低。如果无节操的生活成为主流节奏，恐怕将实践“谎话重复千遍即变真理”的悲哀。
</span></p>

<p>再比如第4章 “为什么用户喜欢无须思考的选择”，</p>

<p>  （可否）一句话概括 &#8211; <strong>懒惰是人类的天性</strong></p>

<p>后面几章的内容似乎对中国读者没什么用途，不推荐阅读。<strong>完</strong>
<span class="error_section">
比如“可用性是基本礼貌”，拿某连市公积金管理网站为例，政府项目只支持IE，其他浏览器上界面就乱七八糟。
还有一致命口诀：
<code>欲用此站，必下插件；若已下载，未必成功；</code>
多少仁人志士一口鲜血扑在显示器上。
</span></p>

<p><span class="error_section">
末了，实在不觉得这本书是为Web从业人员编写的，应该面向的对象是那种技术白和那种特别傻的外国人。怀着忐忑的心情到读书圣地-豆瓣去拜读一下评论和打分，尼玛！打分居然是<a href="http://book.douban.com/subject/1440223/">8.6</a>！向打3星以下的读者表示敬意，打4，5星的读者悄悄献上一句“傻逼”，不留一丝遗憾。哦，差点忘了我看这本书是源于一个推上看到的书评，当时控制自己先看书再看书评，现在发现白控制了，这TM哪是书评，明明是把目录抄了一遍！哦，也许这位大侠也顿悟了，学习这本书最好的方法就是看一遍目录。
</span>
<span class="error_section">
一本风靡网络，赞誉满满的好书在我这里坠落了。消耗了我一天半时间（刨除圣诞提前3小时下班，数小时刷推扯淡，应剩余4-5小时），收获的只是失望的书真的值得黑一下。请记得，
</span></p>

<h1 class='scale'>如果黑，请用力</h1>


<p><span class="error_section">
  后记：一不小心语无伦次扯了这么长的蛋，上面虽然不小心将Twitter和微博并列举例，但本人还是偏袒Twitter。 （理由你们懂的）<br>
  不过世界变化快，也许不久我再看自己这东西都觉得脑残，但没关系，那是我自己的事。想黑我的朋友请参考上面的大字，因为我的节操也所剩无几了。
</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何制作自己的gem （二）]]></title>
    <link href="http://i3zhe.github.com/blog/2012/10/31/ru-he-zhi-zuo-zi-ji-de-gemzhi-er/"/>
    <updated>2012-10-31T11:17:00+08:00</updated>
    <id>http://i3zhe.github.com/blog/2012/10/31/ru-he-zhi-zuo-zi-ji-de-gemzhi-er</id>
    <content type="html"><![CDATA[<p>接上篇，<a href="http://i3zhe.github.com/blog/2012/10/29/ru-he-zhi-zuo-zi-ji-de-gem/">如何制作自己的GEM (一)</a></p>

<ul>
<li><a href="#writing-tests">写测试</a></li>
<li><a href="#document-code">给gem写文档</a></li>
<li><a href="#wrapup">总结</a>
<a id="writing-tests"></a></li>
</ul>


<h2>写测试</h2>


<p>泰斯特你的gem是贼拉的重要！它不仅帮助你确认你的代码是可以运行的，而且它也帮助别人了解你的gem是顺利工作的。当衡量一个gem时，ruby开发者倾向于通过查看一套可靠的测试（或者说由于缺少测试）来作为信任这段代码的主要理由。</p>

<p>Gems支持在代码包里添加测试文件，所以当下载完gem后我们就可以开始测湿了。有一个致力于此的社区已经出现，它的名字叫<a href="http://test.rubygems.org/">GemTesters</a>，这里有详细的文档介绍在不同的Ruby架构和解释器中运行gem测湿。</p>

<p>一句话不割：请测试你的GEM！</p>

<p><code>Test::Unit</code>是Ruby内置的测湿框架。网上狼哇多的<a href="https://github.com/seattlerb/minitest/blob/master/README.txt">教程</a>介绍如何使用它。当然还有许多其他的测试框架可用。Rspec是很流行的一个。说白了，不管你用哪个，测湿就行！</p>

<p>下面咱们给女神加点测湿。需要再加几个文件：一个是Rakefile，还有一个全新的test文件夹：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% tree
</span><span class='line'>.
</span><span class='line'>├── Rakefile
</span><span class='line'>├── bin
</span><span class='line'>│   └── nvshen
</span><span class='line'>├── nvshen.gemspec
</span><span class='line'>├── lib
</span><span class='line'>│   ├── nvshen
</span><span class='line'>│   │   └── translator.rb
</span><span class='line'>│   └── nvshen.rb
</span><span class='line'>└── test
</span><span class='line'>    └── test_nvshen.rb</span></code></pre></td></tr></table></div></figure>


<p>Rakefile可以让你自动跑测湿：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat Rakefile
</span><span class='line'>require 'rake/testtask'
</span><span class='line'>
</span><span class='line'>Rake::TestTask.new do |t|
</span><span class='line'>  t.libs &lt;&lt; 'test'
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>desc "Run tests"
</span><span class='line'>task :default =&gt; :test</span></code></pre></td></tr></table></div></figure>


<p>现在执行<code>rake test</code>或者就<code>rake</code>就能跑测湿啦。呵呵，下面是一个女神的基本测湿文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat test/test_nvshen.rb
</span><span class='line'>require 'test/unit'
</span><span class='line'>require 'nvshen'
</span><span class='line'>
</span><span class='line'>class NvshenTest &lt; Test::Unit::TestCase
</span><span class='line'>  def test_english_hello
</span><span class='line'>    assert_equal "hello nvshen",
</span><span class='line'>      nvshen.hi("english")
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def test_any_hello
</span><span class='line'>    assert_equal "hello nvshen",
</span><span class='line'>      nvshen.hi("ruby")
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def test_spanish_hello
</span><span class='line'>    assert_equal "你好 女神",
</span><span class='line'>      nvshen.hi("chinese")
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>最后执行测湿：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rake test
</span><span class='line'>(in /Users/qrush/Dev/ruby/nvshen)
</span><span class='line'>Loaded suite
</span><span class='line'>Started
</span><span class='line'>...
</span><span class='line'>Finished in 0.000736 seconds.
</span><span class='line'>
</span><span class='line'>3 tests, 3 assertions, 0 failures, 0 errors, 0 skips
</span><span class='line'>
</span><span class='line'>Test run options: --seed 15331</span></code></pre></td></tr></table></div></figure>


<p>绿灯通过！好吧，其实取决与你的shell配色。想学习更多的好例子，最佳实践就是去github瞎溜达并且读别人的代码。</p>

<hr>


<p><a id="document-code"></a></p>

<h2>给代码写文档</h2>


<p>大多数gems默认用RDoc来生成文档。有大量好的<a href="http://docs.seattlerb.org/rdoc/RDoc/Markup.html">教程</a>传授如何用RDoc来写文档。下面是一个简单示例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># The main Nvshen driver
</span><span class='line'>class Nvshen
</span><span class='line'>  # Say hi to the world!
</span><span class='line'>  #
</span><span class='line'>  # Example:
</span><span class='line'>  #   &gt;&gt; Nvshen.hi("chinese")
</span><span class='line'>  #   =&gt; 你好 女神
</span><span class='line'>  #
</span><span class='line'>  # Arguments:
</span><span class='line'>  #   language: (String)
</span><span class='line'>
</span><span class='line'>  def self.hi(language = "english")
</span><span class='line'>    translator = Translator.new(language)
</span><span class='line'>    puts translator.hi
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>另一个出色的文档选择是<a href="http://yardoc.org/">YARD</a>，因为当你推送gem时，RubyDoc.info会通过你的gem自动生成YARDocs。 YARD向后兼容RDoc，并且有一篇文章<a href="http://rubydoc.info/docs/yard/file/docs/GettingStarted.md">很好的文章</a>介绍了他们的区别以及用法。</p>

<hr>


<p><a id="wrapup"></a></p>

<h2>总结</h2>


<p>有了一个构建RubyGem的基本思路，我们希望你将去亲自实践。</p>

<hr>


<p><a id="credits"></a></p>

<h2>演员表</h2>


<p>这篇教程借鉴了<a href="http://rubylearning.com/blog/2010/10/06/gem-sawyer-modern-day-ruby-warrior/">Gem Sawyer的Modern Day Ruby Warrior</a>，由<a href="http://i3zhe.github.com">Jerry Huo</a>翻译改编。如有巧合，纯属雷同！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【翻译】如何制作自己的GEM (一)]]></title>
    <link href="http://i3zhe.github.com/blog/2012/10/29/ru-he-zhi-zuo-zi-ji-de-gem/"/>
    <updated>2012-10-29T14:00:00+08:00</updated>
    <id>http://i3zhe.github.com/blog/2012/10/29/ru-he-zhi-zuo-zi-ji-de-gem</id>
    <content type="html"><![CDATA[<p>原文链接： <a href="http://guides.rubygems.org/make-your-own-gem/">猛击这里</a></p>

<p>今天这个会，我们将学习如何把你的ruby代码打包成外卖（pia！开会开出瘾了？外卖个头，你个吃货！ 是gem啊！）</p>

<ul>
<li><a href="#intro">介绍</a></li>
<li><a href="#first_gem">处女gem</a></li>
<li><a href="#more-files">包含更多文件</a></li>
<li><a href="#executable">添加可执行文件</a></li>
<li><a href="#writing-tests">写测试</a></li>
<li><a href="#document-code">给gem写文档</a></li>
<li><a href="#wrapup">总结</a></li>
</ul>


<hr>


<p><a id="intro"></a></p>

<h2 id="intro">介绍</h2>


<p>感谢RubyGems内嵌的一个工具，让我们创建和发布gem变得非常简单。下面我们来制作一个简单的“hello 女神”gem，大家回家以后可以随便耍耍！ 我们要做的这个gem的代码已经在<a href="https://github.com/qrush/hola">github</a>安家了，需要的猛击。</p>

<hr>


<p><a id="first_gem"></a></p>

<h2 id="first_gem">处女gem</h2>


<p>我将从一个ruby文件开始来创建这个女神gem，还有她的闺蜜gemspec。你愿意的话可以给这个gem起个新名字来发布（或许是波多野结衣神马的，你懂的）。查阅并参考一下官方<a href="http://guides.rubygems.org/patterns/#consistent-naming">样式向导</a>的基本推荐来命名你的Gem。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% tree
</span><span class='line'>.
</span><span class='line'>├── nvshen.gemspec
</span><span class='line'>└── lib
</span><span class='line'>    └── nvshen.rb</span></code></pre></td></tr></table></div></figure>


<p>Gem的代码主要放置在<code>lib</code>目录下。通常的原则是让一个ruby文件和你的gem名字相同，因为当<code>require 'nvshen'</code>运行时，她会自动被加载。她的闺蜜文件是负责设置你的gem代码和API。</p>

<p><code>lib/nvshen.rb</code>里的代码是非常柔弱无骨的。它只是保证你可以看到女神gem会有些输出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat lib/nvshen.rb
</span><span class='line'>class Nvshen
</span><span class='line'>  def self.hi
</span><span class='line'>    puts "Hello Nvshen!"
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>gemspec文件定义了gem的内容，作者，还有gem的版本。它也是你通往<a href="http://www.rubygems.org">RubyGems.org</a>的介绍信。你在一个gem上所能看到的所有信息(象<a href="http://rubygems.org/gems/jekyll">jekyll</a>)都来自这个闺蜜文件-gemspec。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat hola.gemspec
</span><span class='line'>Gem::Specification.new do |s|
</span><span class='line'>  s.name        = 'nvshen'
</span><span class='line'>  s.version     = '0.0.0'
</span><span class='line'>  s.date        = '2012-12-29'
</span><span class='line'>  s.summary     = "Nvshen!"
</span><span class='line'>  s.description = "A simple hello nvshen gem"
</span><span class='line'>  s.authors     = ["Jerry Huo"]
</span><span class='line'>  s.email       = 'hjzdhr@163.com'
</span><span class='line'>  s.files       = ["lib/nvshen.rb"]
</span><span class='line'>  s.homepage    =
</span><span class='line'>    'http://rubygems.org/gems/hola'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>脸熟吧？这个闺蜜gemspec也是ruby系的，所以你可以写脚本来生成文件名和更改版本号。这个闺蜜妹子还有很多内置参数，感兴趣的请猛击<a href="http://guides.rubygems.org/specification-reference">这里</a>。</p>

<p>当你创建完这个gemspec文件后，你就可以通过它构建一个gem了。然后在本地安装这个gem来进行测试。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gem build nvshen.gemspec
</span><span class='line'>Successfully built RubyGem
</span><span class='line'>Name: nvshen
</span><span class='line'>Version: 0.0.0
</span><span class='line'>File: nvshen-0.0.0.gem
</span><span class='line'>
</span><span class='line'>% gem install ./nvshen-0.0.0.gem
</span><span class='line'>Successfully installed nvshen-0.0.0
</span><span class='line'>1 gem installed</span></code></pre></td></tr></table></div></figure>


<p>这个迷烟测试还没有结束：最后一步就是<code>require</code>此gem并调戏她：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% irb
</span><span class='line'>&gt;&gt; require 'nvshen'
</span><span class='line'>=&gt; true
</span><span class='line'>&gt;&gt; Nvshen.hi
</span><span class='line'>Hello Nvshen!</span></code></pre></td></tr></table></div></figure>


<p><em>如果你使用的ruby版本低于1.9.2，你需要使用<code>irb -rubygems</code>，或者运行irb之后再require rubygems库</em></p>

<p>现在你可以和ruby社区的其他人一起分享女神这个gem。假设你已经有了一个账户， 把你的gem发布到RubyGems.org只需要一个命令。按下面提示在你的电脑上设置你的RubyGems账户：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -u YOUR_USER_NAME https://rubygems.org/api/v1/api_key.yaml &gt;
</span><span class='line'>~/.gem/credentials
</span><span class='line'>Enter host password for user 'YOUR_USER_NAME':</span></code></pre></td></tr></table></div></figure>


<p>设好这一步，你就可以推出你的新Gem了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gem push nvshen-0.0.0.gem
</span><span class='line'>Pushing gem to RubyGems.org...
</span><span class='line'>Successfully registered gem: nvshen (0.0.0)</span></code></pre></td></tr></table></div></figure>


<p>很短的时间之内（通常不超过一年），任何人都可以安装你的gem了。你可以在<a href="https://rubygems.org/gems/hola">RubyGems.org</a>上看到她，或者通过RubyGems.org上在任何计算机上得到她。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gem list -r nvshen
</span><span class='line'>
</span><span class='line'>*** REMOTE GEMS ***
</span><span class='line'>
</span><span class='line'>nvshen (0.0.0)
</span><span class='line'>
</span><span class='line'>% gem install nvshen
</span><span class='line'>Successfully installed nvshen-0.0.0
</span><span class='line'>1 gem installed</span></code></pre></td></tr></table></div></figure>


<p>用Ruby和RubyGems分享代码实在是太轻松了。</p>

<hr />

<p><a id="more-files"></a></p>

<h2>包含更多文件</h2>


<p>把所有东西放在一个文件里会影响扩展。我们再让女神丰满点。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat lib/nvshen.rb
</span><span class='line'>class Nvshen
</span><span class='line'>  def self.hi(language = "english")
</span><span class='line'>    translator = Translator.new(language)
</span><span class='line'>    puts translator.hi
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>class Nvshen::Translator
</span><span class='line'>  def initialize(language)
</span><span class='line'>    @language = language
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def hi
</span><span class='line'>    case @language
</span><span class='line'>    when "chinese"
</span><span class='line'>      "你好 女神"
</span><span class='line'>    else
</span><span class='line'>      "hello nvshen"
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>女神变得有点臃肿。让我们把<code>Translator</code>分解成单独的文件。如前面提到的，gem根目录那个文件是负责加载gem的代码。gem的其他文件通常放置在<code>lib</code>文件夹下与gem同名的目录底下。我们可以把这个gem分解成这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% tree
</span><span class='line'>.
</span><span class='line'>├── nvshen.gemspec
</span><span class='line'>└── lib
</span><span class='line'>    ├── nvshen
</span><span class='line'>    │   └── translator.rb
</span><span class='line'>    └── nvshen.rb</span></code></pre></td></tr></table></div></figure>


<p><code>Translator</code>现在位于<code>lib/nvshen</code>目录下，我们可以通过<code>require</code>方式在<code>lib/nvshen.rb</code>里轻松的调用它。<code>Translator</code>的代码并没有多大差异：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat lib/nvshen/translator.rb
</span><span class='line'>class Nvshen::Translator
</span><span class='line'>  def initialize(language)
</span><span class='line'>    @language = language
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def hi
</span><span class='line'>    case @language
</span><span class='line'>    when :chinese
</span><span class='line'>      "你好 女神"
</span><span class='line'>    else
</span><span class='line'>      "hello nvshen"
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>但现在<code>nvshen.rb</code>里需要增加一点代码来加载<code>Translator</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat lib/nvshen.rb
</span><span class='line'>class Nvshen
</span><span class='line'>  def self.hi(language = :english)
</span><span class='line'>    translator = Translator.new(language)
</span><span class='line'>    translator.hi
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>require 'nvshen/translator'</span></code></pre></td></tr></table></div></figure>


<p>接下来试一试，启动<code>irb</code>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% irb -Ilib -rnvshen
</span><span class='line'>irb(main):001:0&gt; Nvshen.hi(:english)
</span><span class='line'>=&gt; "hello nvshen"
</span><span class='line'>irb(main):002:0&gt; nvshen.hi(:chinese)
</span><span class='line'>=&gt; "你好 女神"</span></code></pre></td></tr></table></div></figure>


<p>这里我们需要用到一个奇怪的命令行标志<code>-Ilib</code>. 通常RubyGems会自动替你引用<code>lib</code>目录，所以终端用户通常不需要为配置加载路径而担忧。 然而，如果你是在RubyGems之外的环境运行代码，你就需要自己配置这些东西。可能有人会在代码里操作<code>$LOAD_PATH</code>，但那通常被视为反面示范。在这个<a href="http://guides.rubygems.org/patterns">向导</a>里有很多反面示例（当然也有正面示例）。</p>

<p>如果你在gem里添加了许多文件，千万要记得在发布前把他们加到gemspec的file数组里。因此，许多开发者通过<a href="http://seattlerb.rubyforge.org/hoe/">Hoe</a>, <a href="https://github.com/technicalpickles/jeweler">Jeweler</a>, <a href="http://rake.rubyforge.org/classes/Rake/GemPackageTask.html">Rake</a>, <a href="http://railscasts.com/episodes/245-new-gem-with-bundler">Bundler</a> 来自动化此步骤，或者直接使用动态gemspec。</p>

<p>从这开始，再通过添加更多代码来增加更多目录都是相同的步骤。尽可能合理的分割ruby文件。使你的项目井然有序将帮助你自己和未来的维护者减少头疼和麻烦。</p>

<hr>


<p><a id="executable"></a></p>

<h2>添加可执行文件</h2>


<p>Gem除了可以提供ruby代码的库，还可以曝光一个或多个可执行文件到shell的<code>PATH</code>上。可能最知名的例子就是<code>rake</code>了。另一个非常有用的是<code>prettify_json.rb</code>, 包含在<code>JSON</code>的gem里。 它可以把JSON格式化成更可读的形式（ruby1.9众也内置了它）。例子如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% curl -s http://jsonip.com/ | \
</span><span class='line'>  prettify_json.rb
</span><span class='line'>{
</span><span class='line'>  "ip": "24.60.248.134"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>给gem添加可执行文件的步骤非常简单。你只需要把那个文件放在gem的<code>bin</code>目录底下，然后把它加到gemspec的可执行文件的列表里。咱们来给女神gem添加一个。第一步创建文件并让她可以执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% mkdir bin
</span><span class='line'>% touch bin/hola
</span><span class='line'>% chmod a+x bin/hola</span></code></pre></td></tr></table></div></figure>


<p>可执行文件本身需要一个<code>[shebang](http://www.catb.org/jargon/html/S/shebang.html)</code>来制定是运行什么程序。下面的女神的文件示例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cat bin/nvshen
</span><span class='line'>#!/usr/bin/env ruby
</span><span class='line'>
</span><span class='line'>require 'nvshen'
</span><span class='line'>puts Nvshen.hi(ARGV[0])</span></code></pre></td></tr></table></div></figure>


<p>她的作用就是加载女神gem，然后把命令行第一个参数作为语言的变量来输出结果。下面是运行示例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% ruby -Ilib ./bin/hola
</span><span class='line'>hello nvshen
</span><span class='line'>
</span><span class='line'>% ruby -Ilib ./bin/hola chinese
</span><span class='line'>你好 女神</span></code></pre></td></tr></table></div></figure>


<p>最后，为了使你发布gem的时候，可执行文件被包括其中，你需要把它加到gemspec中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% head -4 nvshen.gemspec
</span><span class='line'>Gem::Specification.new do |s|
</span><span class='line'>  s.name        = 'nvshen'
</span><span class='line'>  s.version     = '0.0.1'
</span><span class='line'>  s.executables &lt;&lt; 'nvshen'</span></code></pre></td></tr></table></div></figure>


<p>推送新gem，你就可以发布自己的命令行工具。需要的话，你可以添加更多的可执行文件，记得也把他们加到gemspec里面的<code>executables</code>的数组。</p>

<p><em>注意：你推送一个新发布时，需要加上新的版本号，更多有关Gem版本的资料，请猛击<a href="http://guides.rubygems.org/patterns/#semantic-versioning">Pattern Guide</a></em></p>

<p><strong><em>未完待续（稍后更新测试）</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSV rendered by fputcsv does not separated correctly]]></title>
    <link href="http://i3zhe.github.com/blog/2012/09/03/csv-rendered-by-fputcsv-does-not-separated-correctly/"/>
    <updated>2012-09-03T17:57:00+08:00</updated>
    <id>http://i3zhe.github.com/blog/2012/09/03/csv-rendered-by-fputcsv-does-not-separated-correctly</id>
    <content type="html"><![CDATA[<p>Recently I am working on a feature which exports the data presented on the web page to a csv file. That&#8217;s pretty easy, huh? The only trouble is the web site was built with <strong>Yii Framework</strong>&#8230;</p>

<p>Luckily, I found there&#8217;s already an light-weight extention called <a href="http://www.yiiframework.com/extension/csvexport">csvexport</a> and you can find it here http://www.yiiframework.com/extension/csvexport</p>

<p>The usage example is pretty clear:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x"> Yii::import(&#39;ext.ECSVExport&#39;);</span>
</span><span class='line'><span class="x"> // CDbCommand</span>
</span><span class='line'><span class="x"> $cmd = Yii::app()-&gt;db-&gt;createCommand(&quot;SELECT * FROM track_test LIMIT 10&quot;);    </span>
</span><span class='line'><span class="x"> $csv = new ECSVExport($cmd);       </span>
</span><span class='line'><span class="x"> $exclude = array(&#39;id&#39;, &#39;deleted&#39;, &#39;prefix&#39;);</span>
</span><span class='line'><span class="x"> $csv-&gt;setExclude($exclude);</span>
</span><span class='line'><span class="x"> $csv-&gt;setOutputFile($outputFile);</span>
</span><span class='line'><span class="x"> $content = $csv-&gt;toCSV();</span>
</span></code></pre></td></tr></table></div></figure>


<p>if you would like to download csv from browser instead of writing to a file, add this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x"> Yii::app()-&gt;getRequest()-&gt;sendFile(&#39;export.csv&#39;, $content, &quot;text/csv&quot;, false);</span>
</span><span class='line'><span class="x"> exit;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything goes well so far. But when I open the new csv file with Excel 2008 (Mac), I found there&#8217;s a problem for human reading, because all data (more than 10 columns) are crowded in the first column, not separated by comma at all!!!</p>

<p>I checked the csv file carefully by opening it with textmate and found it&#8217;s rendering correctly, although not all data have the double quote enclosure. It does not effect the result.</p>

<p>The &#8220;csvexport&#8221; lib is using <a href="http://cn.php.net/manual/en/function.fputcsv.php">fputcsv</a> to render csv.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x"> fputcsv($this-&gt;_filePointer, $headers, $this-&gt;_delimiter, $this-&gt;_enclosure);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The default delimiter is comma - &#8220;,&#8221; how about changing it to another one? Let&#8217;s try semicolon, Oops!!! It&#8217;s working great now.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x"> fputcsv($this-&gt;_filePointer, $headers, &quot;;&quot;, $this-&gt;_enclosure);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Is it a Microsoft Office bug or php bug? Let me know your idea!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fsockopen error - failed to parse address]]></title>
    <link href="http://i3zhe.github.com/blog/2012/05/28/fsockopen-error-failed-to-parse-address/"/>
    <updated>2012-05-28T14:24:00+08:00</updated>
    <id>http://i3zhe.github.com/blog/2012/05/28/fsockopen-error-failed-to-parse-address</id>
    <content type="html"><![CDATA[<p>Just met this error when using MailPress plugin in WordPress.
on file</p>

<p><code>"wp-content/plugins/mailpress/mp-includes/Swiftmailer/classes/Swift/Transport/StreamBuffer.php" Line 233</code></p>

<pre><code>    if (!$this-&gt;_stream = fsockopen($host, $this-&gt;_params['port'], $errno, $errstr, $timeout))
    {
      throw new Swift_TransportException(
        'Connection could not be established with host ' . $this-&gt;_params['host'] .
        ' [' . $errstr . ' #' . $errno . ']'
        );
    }
</code></pre>

<p>Checked the php manual:
<a href="http://cn.php.net/manual/en/function.fsockopen.php">fsockopen</a>
It says</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">resource fsockopen ( string $hostname [, int $port = -1 [, int &amp;$errno [, string &amp;$errstr [, float $timeout = ini_get(&quot;default_socket_timeout&quot;) ]]]] )</span>
</span></code></pre></td></tr></table></div></figure>


<p>After some research, I found that <strong>we can&#8217;t leave the port parameter empty, although it is stated optional</strong>.</p>

<p>This can be traced to C function &#8220;parse_ip_address_ex&#8221;, it needs a colon to separate IP and port number in the textual address it is passed.</p>

<p>Refer from <a href="http://forum.caravelgames.com/viewtopic.php?TopicID=16512">this topic</a></p>

<p>So the solution is simple, either add a port behind the server&#8217;s address, or specify a port as the second parameter.</p>

<figure class='code'><figcaption><span>Simple Solution  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">fsockopen(&#39;relay.xxx.com:25&#39;);</span>
</span><span class='line'><span class="x">or</span>
</span><span class='line'><span class="x">fsockopen(&#39;relay.xxx.com&#39;, 25);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course we won&#8217;t change the MailPress&#8217;s source code, just change the MailPress settings on the dashboard :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://i3zhe.github.com/blog/2012/02/29/first-post/"/>
    <updated>2012-02-29T10:49:00+08:00</updated>
    <id>http://i3zhe.github.com/blog/2012/02/29/first-post</id>
    <content type="html"><![CDATA[<p><strong>Hello Octopress!</strong>
This an example post for more information see:</p>
]]></content>
  </entry>
  
</feed>
